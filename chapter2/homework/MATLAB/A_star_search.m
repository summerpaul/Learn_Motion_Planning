% A星算法的输入:有起点与终点的障碍物地图
% 输出是最短路径
% 图搜索需要关注:维护一个OPEN list 表示待检查的点,维护一个CLOSED List, 表示无需访问的节点
function path = A_star_search(map,MAX_X,MAX_Y)
%%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    
    % 地图障碍物的数量+起点+终点
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    % 
    % MAP中所有的值,赋值为2
    MAP=2*(ones(MAX_X,MAX_Y));
    
    %Initialize MAP with location of the target
    % 获取目标点
    % 目标点是最后的点
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    % 目标点在MAP中的值为0
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    % 有障碍物的点赋值为-1
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    % 起始点为1,起始点为地图中第一个数据
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    %IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    % 维护一个拓展即将访问所有节点的容器
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    %X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    % 将所有的障碍物放入到CLOSED队列中,表示不能被访问的点
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    %  计算当前点到目标点的距离(启发函数的值)
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    % 优先队列中,放入初始节点
    % OPEN 队列表示代检查的点
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
    %  访问第一个点(源点到源点)    
    % 表示访问过不能再访问
    OPEN(OPEN_COUNT,1)=0;
    % 记录被访问过的节点     
    % 将初始元素放入到closed List中
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % 跳出循环的条件:没有需要被访问的节点
%     [r, c] = size(OPEN(OPEN_COUNT, :));
    % 判断CLOSED list中的最后元素是不是终点
    % 判断弹出的点是不是目标点
    % 等价于 OPEN(OPEN_COUNT,2)~= xTarget || OPEN(OPEN_COUNT,3) ~= yTarget
    while(CLOSED(CLOSED_COUNT,1)~= xTarget || CLOSED(CLOSED_COUNT,2) ~= yTarget) %you have to dicide the Conditions for while loop exit 
        % 找出上一时刻弹出的OPEN List中的元素,即CLOSED list中的最后一个元素
         node_x = CLOSED(CLOSED_COUNT,1);
         node_y = CLOSED(CLOSED_COUNT,2);
         % 寻找可扩展的节点
         exp_array = expand_array(node_x,node_y,path_cost,xTarget,yTarget,CLOSED,MAX_X,MAX_Y);
         % 将所占的点放入OPEN List中
         [r, c] = size(exp_array);
         % 现在算法缺陷:没有检查拓展的节点是否在原先的OPEN list中,
         % 而是直接在OPEN List后面直接新增新的节点,OPEN List偏多
         for i = 1 : r 
             temp_x = exp_array(i, 1);
             temp_y = exp_array(i, 2);
             hn= exp_array(i, 3);
             gn= exp_array(i, 4);
             fn= exp_array(i, 5);
       
             OPEN_COUNT=1 + OPEN_COUNT;
             OPEN(OPEN_COUNT,:)=insert_open(temp_x,temp_y,node_x,node_y,hn,gn,fn);
             
         end
         % 找出当前OPEN List中最小的值
         i_min = min_fn(OPEN,OPEN_COUNT,xTarget,yTarget);
         if (i_min == -1)
             str=['Cannot find path !!'];
             disp(str);
             break;
         end
         % 将其弹出并键入到CLOSED list中
         % 算法中的弹出不是将将元素移出OPEN List 而是更改标志位
         OPEN(i_min,1)=0;
         % 算法缺陷,没有将CLOSE List中出现过的节点进行删除再排序,
         % 使得规划的路径需要重新回溯.
         CLOSED_COUNT=CLOSED_COUNT+1;
         CLOSED(CLOSED_COUNT,1)=OPEN(i_min,2);
         CLOSED(CLOSED_COUNT,2)=OPEN(i_min,3);
     %finish the while loop
     %
     
    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
   path = [];
   %寻找CLOSED中最后一个元素,寻找其父亲节点
   end_x = CLOSED(CLOSED_COUNT,1);
   end_y = CLOSED(CLOSED_COUNT,2);
   % 当父亲节点最终为起点的时候路径找到
   n_index = node_index(OPEN,end_x,end_x)
   path_index = 1;
   path(path_index, 1) = end_x;
   path(path_index, 2) = end_y;
   
   while (OPEN(n_index, 2) ~= xStart || OPEN(n_index, 3) ~= yStart)
       pre_x = OPEN(n_index, 4)
       pre_y = OPEN(n_index, 5)
       n_index = node_index(OPEN,pre_x,pre_y);
       path_index = 1 + path_index;
       path(path_index, 1) = pre_x;
       path(path_index, 2) = pre_y;
   end
   path
   % 将路径倒置即为搜索的路径
   path = flip(path);
   path
   
       
   
   
   
end
